proteinChemForm <- unlist(strsplit(proteinChemForm, split = " "))
proteinChemForm <- c(
C = as.integer(proteinChemForm[2]),
H = as.integer(proteinChemForm[4]),
N = as.integer(proteinChemForm[6]),
O = as.integer(proteinChemForm[8]),
S = as.integer(proteinChemForm[10])
)
proteinChemForm <- paste("C",proteinChemForm[1],"H",proteinChemForm[2],"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5])
formulaFrame <- data.frame( z = charge)
proteinChemForm <- pepToForm(proteinSequence)
proteinChemForm <- unlist(strsplit(proteinChemForm, split = " "))
proteinChemForm <- c(
C = as.integer(proteinChemForm[2]),
H = as.integer(proteinChemForm[4]),
N = as.integer(proteinChemForm[6]),
O = as.integer(proteinChemForm[8]),
S = as.integer(proteinChemForm[10])
)
proteinChemForm <- paste("C",proteinChemForm[1],"H",proteinChemForm[2],"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5])
proteinChemForm <- unlist(strsplit(proteinChemForm, split = " "))
proteinChemForm <- c(
C = as.integer(proteinChemForm[2]),
H = as.integer(proteinChemForm[4]),
N = as.integer(proteinChemForm[6]),
O = as.integer(proteinChemForm[8]),
S = as.integer(proteinChemForm[10])
)
formulaFrame <- data.frame( z = charge)
formulaFrame <- ddply(formulaFrame, "z", proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
library("plyr")
formulaFrame <- ddply(formulaFrame, "z", proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
formulaFrame <- data.frame( z = charge)
formulaFrame <- ddply(formulaFrame, "z", proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
formulaFrame <- ddply(formulaFrame, "z", transform ,proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
View(formulaFrame)
distframe <- ddply(formulaFrame, "z", transform, IsotopicDistribution(proteinChemForm, charge = z))
View(distframe)
IsotopicDistribution(proteinChemForm, charge = z)
z = 1
IsotopicDistribution(proteinChemForm, charge = z)
distframe <- ddply(formulaFrame, "z", IsotopicDistribution(proteinChemForm, charge = z))
distframe <- ddply(formulaFrame, "z", function(x){IsotopicDistribution(proteinChemForm, charge = z)})
View(distframe)
proteinSequence <- select(up, proteinAccession, "SEQUENCE", "UNIPROTKB")[,2]
proteinChemForm <- pepToForm(proteinSequence)
proteinChemForm <- unlist(strsplit(proteinChemForm, split = " "))
proteinChemForm <- c(
C = as.integer(proteinChemForm[2]),
H = as.integer(proteinChemForm[4]),
N = as.integer(proteinChemForm[6]),
O = as.integer(proteinChemForm[8]),
S = as.integer(proteinChemForm[10])
)
formulaFrame <- data.frame( z = charge)
formulaFrame <- ddply(formulaFrame, "z", transform ,proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
distframe <- ddply(formulaFrame, "z", function(x){IsotopicDistribution(strsplit(proteinChemForm, split = " "), charge = z)})
distframe <- ddply(formulaFrame, "z", function(x,y){IsotopicDistribution(strsplit(y, split = " "), charge = x)})
write(x)
write("prints to stderr", stderr())
distframe <- ddply(formulaFrame, "z", function(x,y){write(x, stderr())})
distframe <- ddply(formulaFrame, "z", function(x,y){write(y, stderr())})
distframe <- ddply(formulaFrame, "z", function(){write(y, stderr())})
distframe <- ddply(formulaFrame, "z", function(){write(z, stderr())})
distframe <- ddply(formulaFrame, "z", write(z, stderr()))
distframe <- ddply(formulaFrame, "z", write(z, stderr()))
distframe <- ddply(formulaFrame, .(z), write(z, stderr()))
distframe <- ddply(formulaFrame, .(z), write(proteinChemForm, stderr()))
distframe <- ddply(formulaFrame, .(z), write(strsplit(proteinChemForm, split = " "), stderr()))
distframe <- ddply(formulaFrame, .(z), write(strsplit(paste("C",proteinChemForm[1],"H",proteinChemForm[2],"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]), split = " "), stderr()))
distframe <- ddply(formulaFrame, .(z), IsotopicDistribution(strsplit(paste("C",proteinChemForm[1],"H",proteinChemForm[2],"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]), split = " "), stderr()))
distframe <- ddply(formulaFrame, .(z), IsotopicDistribution(strsplit(paste("C",proteinChemForm[1],"H",proteinChemForm[2],"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]), split = " ")))
distframe <- ddply(formulaFrame, .(z), function(){IsotopicDistribution(strsplit(paste("C",proteinChemForm[1],"H",proteinChemForm[2],"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]), split = " "))})
proteinChemForm <- pepToForm(proteinSequence)
proteinChemForm <- unlist(strsplit(proteinChemForm, split = " "))
proteinChemForm <- pepToForm(proteinSequence)
strsplit(proteinChemForm, split = " ")
proteinChemForm <- pepToForm(proteinSequence, output = "list")
formulaCharToList <- function(char){
vec <- unlist(strsplit(char, split = " "))
lis <- list(
C = as.integer(vec[2]),
H = as.integer(vec[4]),
N = as.integer(vec[6]),
O = as.integer(vec[8]),
S = as.integer(vec[10])
)
}
formulaCharToList <- function(char){
vec <- unlist(strsplit(char, split = " "))
lis <- list(
C = as.integer(vec[2]),
H = as.integer(vec[4]),
N = as.integer(vec[6]),
O = as.integer(vec[8]),
S = as.integer(vec[10])
)
return(lis)
}
listToformularChar <- function(lis){
formChar <- paste("C",lis[1],"H",lis[2],"N",lis[3],"O",lis[4],"S",lis[5])
return(formChar)
}
formulaCharToNamedVec <- function(char){
vec <- unlist(strsplit(char, split = " "))
vec <- c(
C = as.integer(vec[2]),
H = as.integer(vec[4]),
N = as.integer(vec[6]),
O = as.integer(vec[8]),
S = as.integer(vec[10])
)
return(vec)
}
NamedVecToformularChar <- function(nvec){
formChar <- paste("C",nvec[1],"H",nvec[2],"N",nvec[3],"O",nvec[4],"S",nvec[5])
return(formChar)
}
proteinSequence <- select(up, proteinAccession, "SEQUENCE", "UNIPROTKB")[,2]
proteinChemForm <- pepToForm(proteinSequence)
proteinChemForm <- formulaCharToNamedVec(proteinChemForm)
formulaFrame <- data.frame( z = charge)
formulaFrame <- ddply(formulaFrame, "z", transform ,proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
View(formulaFrame)
paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5])
formulaFrame <- data.frame( z = charge)
formulaFrame <- ddply(formulaFrame, "z", proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
formulaFrame <- ddply(formulaFrame, .(), transform,  proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
formulaFrame <- data.frame( z = charge)
formulaFrame <- ddply(formulaFrame, transform,  proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
formulaFrame <- ddply(formulaFrame, z, transform,  proteinChemForm = paste("C",proteinChemForm[1],"H",proteinChemForm[2]+z,"N",proteinChemForm[3],"O",proteinChemForm[4],"S",proteinChemForm[5]))
View(formulaFrame)
proteinChemForm <- pepToForm(proteinSequence)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
distframe <- ddply(
formulaFrame,
z,
function(x){
IsotopicDistribution( formularCharToList(x$proteinChemForm), charge = x$z )
}
)
distframe <- ddply(
formulaFrame,
z,
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
formulaCharToList <- function(char){
vec <- unlist(strsplit(as.character(char), split = " "))
lis <- list(
C = as.integer(vec[2]),
H = as.integer(vec[4]),
N = as.integer(vec[6]),
O = as.integer(vec[8]),
S = as.integer(vec[10])
)
return(lis)
}
distframe <- ddply(
formulaFrame,
z,
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
View(distframe)
distframe <- ddply(
formulaFrame,
z,
transform,
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
distframe <- ddply(
formulaFrame,
.(z, proteinChemForm),
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
View(distframe)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = paste(
"C",
proteinChemForm[1],
"H",
proteinChemForm[2]+z,
"N",
proteinChemForm[3],
"O",
proteinChemForm[4],
"S",
proteinChemForm[5])
)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = paste(
"C",
proteinChemForm[1],
"H",
proteinChemForm[2]+z,
"N",
proteinChemForm[3],
"O",
proteinChemForm[4],
"S",
proteinChemForm[5])
)
View(formulaFrame)
proteinChemForm <- pepToForm(proteinSequence)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- data.frame( z = charge, proteinChemForm = as.character(proteinChemForm))
formulaFrame <- data.frame( z = charge, proteinChemForm = character(proteinChemForm))
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = NamedVecToformularChar(
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
)
)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = NamedVecToformularChar(
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
)
)
formulaCharToNamedVec <- function(char){
vec <- unlist(strsplit(as.character(char), split = " "))
vec <- c(
C = as.integer(vec[2]),
H = as.integer(vec[4]),
N = as.integer(vec[6]),
O = as.integer(vec[8]),
S = as.integer(vec[10])
)
return(vec)
}
formulaCharToList <- function(char){
vec <- unlist(strsplit(as.character(char), split = " "))
lis <- list(
C = as.integer(vec[2]),
H = as.integer(vec[4]),
N = as.integer(vec[6]),
O = as.integer(vec[8]),
S = as.integer(vec[10])
)
return(lis)
}
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = NamedVecToformularChar(
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
)
)
distframe <- ddply(
formulaFrame,
.(z, proteinChemForm),
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
generateDist <- function( uniprotSpeciesName = "Homo sapiens",
proteinAccession = "P02144",
charge = 1:20,
removeFirstM = TRUE,
variableModifications = NA){
tmp <- availableUniprotSpecies()
if (tmp$`Species name` == uniprotSpeciesName) taxId <- tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName]
#else generate warning and quit
tmp <- UniProt.ws(taxId)
proteinSequence <- select(up, proteinAccession, "SEQUENCE", "UNIPROTKB")[,2]
proteinChemForm <- pepToForm(proteinSequence)
#proteinChemForm <- formulaCharToNamedVec(proteinChemForm)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = NamedVecToformularChar(
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
)
)
distframe <- ddply(
formulaFrame,
.(z, proteinChemForm),
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
}
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist()
uniprotSpeciesName = "Homo sapiens"
generateDist <- function( uniprotSpeciesName = "Homo sapiens",
proteinAccession = "P02144",
charge = 1:20,
removeFirstM = TRUE,
variableModifications = NA){
tmp <- availableUniprotSpecies()
if (tmp$`Species name` == uniprotSpeciesName) taxId <- tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName]
#else generate warning and quit
tmp <- UniProt.ws(taxId)
proteinSequence <- select(up, proteinAccession, "SEQUENCE", "UNIPROTKB")[,2]
proteinChemForm <- pepToForm(proteinSequence)
#proteinChemForm <- formulaCharToNamedVec(proteinChemForm)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = NamedVecToformularChar(
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
)
)
distframe <- ddply(
formulaFrame,
.(z, proteinChemForm),
function(x){
IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )
}
)
}
proteinAccession = "P02144"
charge = 1:20
tmp <- availableUniprotSpecies()
if (tmp$`Species name` == uniprotSpeciesName) taxId <- tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName]
tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName]
if (tmp$`Species name` == uniprotSpeciesName) taxId <- tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName]
tmp$`Species name` == uniprotSpeciesName
any(tmp$`Species name` == uniprotSpeciesName)
if (any(tmp$`Species name` == uniprotSpeciesName)) taxId <- tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName]
tmp <- UniProt.ws(taxId)
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist()
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist()
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist()
tmp <- UniProt.ws(taxId)
if (any(tmp$`Species name` == uniprotSpeciesName)) taxId <- as.integer(tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName])
tmp <- UniProt.ws(taxId)
proteinSequence <- select(tmp, proteinAccession, "SEQUENCE", "UNIPROTKB")[,2]
proteinChemForm <- pepToForm(proteinSequence)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
z,
transform,
proteinChemForm = NamedVecToformularChar(
formulaCharToNamedVec(proteinChemForm) + c(0,z,0,0,0)
)
)
formulaFrame$proteinChemForm <- NamedVecToformularChar(
formulaCharToNamedVec(formulaFrame$proteinChemForm) + c(0,formulaFrame$z,0,0,0)
)
View(formulaFrame)
formulaFrame$z
formulaCharToNamedVec(formulaFrame$proteinChemForm)
formulaCharToNamedVec(formulaFrame$proteinChemForm) + c(0,formulaFrame$z,0,0,0)
formulaCharToNamedVec(formulaFrame$proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
z,
function(x){
tmp <- formulaCharToNamedVec(x$proteinChemForm) + c(0,x$z,0,0,0)
tmp <- NamedVecToformularChar(tmp)
}
)
formulaFrame <- ddply(
formulaFrame,
"z",
function(x){
tmp <- formulaCharToNamedVec(x$proteinChemForm) + c(0,x$z,0,0,0)
tmp <- NamedVecToformularChar(tmp)
}
)
View(formulaFrame)
formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)
formulaFrame <- ddply(
formulaFrame,
"z",
function(x){
tmp <- formulaCharToNamedVec(x$proteinChemForm) + c(0,x$z,0,0,0)
data.frame( proteinChemForm <- NamedVecToformularChar(tmp))
}
)
formulaFrame <- ddply(
formulaFrame,
"z",
function(x){
tmp <- formulaCharToNamedVec(x$proteinChemForm) + c(0,x$z,0,0,0)
data.frame( proteinChemForm = NamedVecToformularChar(tmp))
}
)
View(formulaFrame)
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist()
ggplot(mya_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(847.5,850))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(847.5,850))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(847.5,850))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(800,850))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(800,1000))
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(800,1000))
myo <- read.csv2("Spectrum_Myoglobin.csv", sep = ",", dec = "." )
colnames(myo) <- c("mz", "intensity")
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(800,1000))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange()
myo_sim <- generateDist( charge = 30:10)
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange()
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(0,1750))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(500,1750))
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(500,1750))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(950,1050))
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(950,1050))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(950,1050))
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist( charge = 30:10, removeFirstM = TRUE)
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo_sim <- generateDist( charge = 30:10, removeFirstM = TRUE)
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(950,1050))
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(950,1050))
ggplot(myo, aes(mz, intensity)) + geom_line() # + xlim(c(950,1050))
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(0,2000))
ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(500,2000))
ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(500,2000))
p <- p + ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(500,2000))
p <- ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent)) + geom_linerange() + xlim(c(500,2000))
p <- p + ggplot(myo, aes(mz, intensity)) + geom_line() + xlim(c(500,2000))
p <- ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent, colour = "red")) + geom_linerange() + xlim(c(500,2000))
p
p <- p + geom_line(myo, aes(mz, intensity)) + xlim(c(500,2000))
p <- p + geom_line(data =  myo, aes(mz, intensity)) + xlim(c(500,2000))
p
p <- ggplot(myo_sim, aes(mz, ymin = 0, ymax = percent, colour = "red")) + geom_linerange() + xlim(c(500,2000))
p
p <- p + geom_line(data =  myo, aes(mz, intensity)) + xlim(c(500,2000))
p
p <- ggplot()
p <- p + geom_linerange(myo_sim, aes(mz, ymin = 0, ymax = percent, colour = "red"))
p <- p + geom_linerange(data = myo_sim, aes(mz, ymin = 0, ymax = percent, colour = "red"))
p
p <- p + geom_line(data =  myo, aes(mz, intensity)) + xlim(c(500,2000))
p
p <- p + geom_line(data =  myo, aes(mz, intensity)) + xlim(c(950,1050))
p <- ggplot()
p <- p + geom_linerange(data = myo_sim, aes(mz, ymin = 0, ymax = percent, colour = "red"))
p
p <- p + geom_line(data =  myo, aes(mz, intensity)) + xlim(c(950,1050))
p
p <- ggplot()
p <- p + geom_linerange(data = myo_sim, aes(mz, ymin = 0, ymax = percent, colour = "red"))
p + xlim(c(950,1050))
p <- p + geom_line(data =  myo, aes(mz, intensity))
p + xlim(c(950,1050))
p <- p + geom_vline(data = myo_sim, aes(mz, colour = "red"))
p <- ggplot()
p <- p + geom_vline(data = myo_sim, aes(mz, colour = "red"))
p <- ggplot()
p <- p + geom_vline(data = myo_sim, aes(xintercept = mz, colour = "red"))
p + xlim(c(950,1050))
myo <- read.csv2("Spectrum_Myoglobin.csv", sep = ",", dec = "." )
colnames(myo) <- c("mz", "intensity")
p <- p + geom_line(data =  myo, aes(mz, intensity))
p + xlim(c(950,1050))
p <- ggplot()
p <- p + geom_line(data =  myo, aes(mz, intensity))
p + xlim(c(950,1050))
p <- p + geom_vline(data = myo_sim, aes(xintercept = mz, colour = "red"))
p + xlim(c(950,1050))
p + xlim(c(990,1050))
p + xlim(c(990,1010))
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
myo <- read.csv2("Spectrum_Myoglobin.csv", sep = ",", dec = "." )
colnames(myo) <- c("mz", "intensity")
p <- ggplot()
p <- p + geom_line(data =  myo, aes(mz, intensity))
p + xlim(c(950,1050))
myo_sim <- generateDist( charge = 30:10, removeFirstM = TRUE)
myo_sim <- generateDist( charge = 30:10, removeFirstM = TRUE)
up <- UniProt.ws(9796)
library(UniProt.ws)
up <- UniProt.ws(9796)
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
library("ggplot2")
library("plyr")
source("Functions.R")
myo <- read.csv2("Spectrum_Myoglobin.csv", sep = ",", dec = "." )
colnames(myo) <- c("mz", "intensity")
p <- ggplot()
p <- p + geom_line(data =  myo, aes(mz, intensity))
p + xlim(c(950,1050))
myo_sim <- generateDist( charge = 30:10, removeFirstM = TRUE)
library(UniProt.ws)
source('~/GitHub/PRoteinMassSpecSim/Functions.R')
up <- UniProt.ws(9796)
