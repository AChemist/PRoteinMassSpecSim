{
    "collab_server" : "",
    "contents" : "\n\npepToForm <- function(sequence){\n  if (!is.na(sequence)) {\n    peptideVector <- strsplit(sequence, split = \"\")[[1]]\n    FindElement <- function(residue){\n      element <- c(C = 0, H = 0, N = 0, O = 0, S = 0)\n      if (residue == \"A\") element <- c(C = 3, H = 5, N = 1, O = 1, S = 0)\n      if (residue == \"R\") element <- c(C = 6, H = 12, N = 4, O = 1, S = 0)\n      if (residue == \"N\") element <- c(C = 4, H = 6, N = 2, O = 2, S = 0)\n      if (residue == \"D\") element <- c(C = 4, H = 5, N = 1, O = 3, S = 0)\n      if (residue == \"C\") element <- c(C = 3, H = 5, N = 1, O = 1, S = 1)\n      if (residue == \"c\") element <- c(C = 5, H = 6, N = 2, O = 2, S = 1)\n      if (residue == \"E\") element <- c(C = 5, H = 7, N = 1, O = 3, S = 0)\n      if (residue == \"Q\") element <- c(C = 5, H = 8, N = 2, O = 2, S = 0)\n      if (residue == \"G\") element <- c(C = 2, H = 3, N = 1, O = 1, S = 0)\n      if (residue == \"H\") element <- c(C = 6, H = 7, N = 3, O = 1, S = 0)\n      if (residue == \"I\") element <- c(C = 6, H = 11, N = 1, O = 1, S = 0)\n      if (residue == \"L\") element <- c(C = 6, H = 11, N = 1, O = 1, S = 0)\n      if (residue == \"K\") element <- c(C = 6, H = 12, N = 2, O = 1, S = 0)\n      if (residue == \"M\") element <- c(C = 5, H = 9, N = 1, O = 1, S = 1)\n      if (residue == \"m\") element <- c(C = 5, H = 9, N = 1, O = 2, S = 1)\n      if (residue == \"F\") element <- c(C = 9, H = 9, N = 1, O = 1, S = 0)\n      if (residue == \"P\") element <- c(C = 5, H = 7, N = 1, O = 1, S = 0)\n      if (residue == \"S\") element <- c(C = 3, H = 5, N = 1, O = 2, S = 0)\n      if (residue == \"T\") element <- c(C = 4, H = 7, N = 1, O = 2, S = 0)\n      if (residue == \"W\") element <- c(C = 11, H = 10, N = 2, O = 1, S = 0)\n      if (residue == \"Y\") element <- c(C = 9, H = 9, N = 1, O = 2, S = 0)\n      if (residue == \"V\") element <- c(C = 5, H = 9, N = 1, O = 1, S = 0)\n      return(element)\n    }\n    resultsVector <- c(C = 0, H = 0, N = 0, O = 0, S = 0)\n    for (i in 1:length(peptideVector)) {\n      resultsVector <- FindElement(peptideVector[i]) + resultsVector\n    }\n    resultsVector <- resultsVector + c(C = 0, H = 2, N = 0, O = 1, S = 0)\n    \n    result <- paste(\"C\",resultsVector[1],\"H\",resultsVector[2],\"N\",resultsVector[3],\"O\",resultsVector[4],\"S\",resultsVector[5], \"P\",0)\n    \n    return(result)\n  }\n  else return(NA)\n}\n\n\nformulaCharToList <- function(char){\n  \n  vec <- unlist(strsplit(as.character(char), split = \" \"))\n  lis <- list(\n    C = as.integer(vec[2]),\n    H = as.integer(vec[4]),\n    N = as.integer(vec[6]),\n    O = as.integer(vec[8]),\n    S = as.integer(vec[10]),\n    P = as.integer(vec[12])\n  )\n  return(lis)\n}\n\nlistToformularChar <- function(lis){\n  formChar <- paste(\"C\",lis[1],\"H\",lis[2],\"N\",lis[3],\"O\",lis[4],\"S\",lis[5],\"P\",lis[6])\n  return(formChar)\n}\n\n\nformulaCharToNamedVec <- function(char){\n  \n  vec <- unlist(strsplit(as.character(char), split = \" \"))\n  vec <- c(\n    C = as.integer(vec[2]),\n    H = as.integer(vec[4]),\n    N = as.integer(vec[6]),\n    O = as.integer(vec[8]),\n    S = as.integer(vec[10]),\n    P = as.integer(vec[12])\n  )\n  return(vec)\n}\n\nnamedVecToformularChar <- function(nvec){\n  formChar <- paste(\"C\",nvec[1],\"H\",nvec[2],\"N\",nvec[3],\"O\",nvec[4],\"S\",nvec[5],\"P\",nvec[6])\n  return(formChar)\n}\n\n\n\ngenerateChargedDist <- function(\n  uniprotSpeciesName = \"Homo sapiens\",\n  proteinAccession = \"P02144\", \n  charge = 1:20, \n  removeFirstM = FALSE, \n  modification = \"C 0 H 0 N 0 O 0 S 0 P 1\"\n)\n  {\n  \n  tmp <- availableUniprotSpecies()\n  \n  if (any(tmp$`Species name` == uniprotSpeciesName)) taxId <- as.integer(tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName])\n  #else generate warning and quit\n  \n  tmp <- UniProt.ws(taxId)\n  \n  proteinSequence <- select(tmp, proteinAccession, \"SEQUENCE\", \"UNIPROTKB\")[,2]\n  \n  if (removeFirstM == TRUE) proteinSequence <- substring(proteinSequence, 2)\n  \n  proteinChemForm <- pepToForm(proteinSequence)\n  \n  proteinChemForm <- formulaCharToNamedVec(proteinChemForm) + formulaCharToNamedVec(modification)\n  proteinChemForm <- namedVecToformularChar(proteinChemForm)\n  \n  dframe <- ldply(charge, function(x){\n    \n    tmp <- formulaCharToNamedVec(proteinChemForm)\n    tmp <- unname(tmp + c(0,x,0,0,0,0))\n    tmp <- list( C = tmp[1], H = tmp[2], N = tmp[3], O = tmp[4], S = tmp[5], P = tmp[6])\n    dist <- IsotopicDistribution( tmp, charge = x )\n    dist$charge <- x\n    dist$chemForm <- listToformularChar(tmp)  \n    return(dist)\n    \n  })\n  \n  return(dframe)\n}\n\n  \n",
    "created" : 1486418648370.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1353528464",
    "id" : "B0AB46DE",
    "lastKnownWriteTime" : 1486590775,
    "last_content_update" : 1486590775838,
    "path" : "~/GitHub/PRoteinMassSpecSim/Functions.R",
    "project_path" : "Functions.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}