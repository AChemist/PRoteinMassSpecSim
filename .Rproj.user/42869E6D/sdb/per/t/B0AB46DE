{
    "collab_server" : "",
    "contents" : "\n\npepToForm <- function(sequence, output = \"vector\"){\n  if (!is.na(sequence)) {\n    peptideVector <- strsplit(sequence, split = \"\")[[1]]\n    FindElement <- function(residue){\n      element <- c(C = 0, H = 0, N = 0, O = 0, S = 0)\n      if (residue == \"A\") element <- c(C = 3, H = 5, N = 1, O = 1, S = 0)\n      if (residue == \"R\") element <- c(C = 6, H = 12, N = 4, O = 1, S = 0)\n      if (residue == \"N\") element <- c(C = 4, H = 6, N = 2, O = 2, S = 0)\n      if (residue == \"D\") element <- c(C = 4, H = 5, N = 1, O = 3, S = 0)\n      if (residue == \"C\") element <- c(C = 3, H = 5, N = 1, O = 1, S = 1)\n      if (residue == \"c\") element <- c(C = 5, H = 6, N = 2, O = 2, S = 1)\n      if (residue == \"E\") element <- c(C = 5, H = 7, N = 1, O = 3, S = 0)\n      if (residue == \"Q\") element <- c(C = 5, H = 8, N = 2, O = 2, S = 0)\n      if (residue == \"G\") element <- c(C = 2, H = 3, N = 1, O = 1, S = 0)\n      if (residue == \"H\") element <- c(C = 6, H = 7, N = 3, O = 1, S = 0)\n      if (residue == \"I\") element <- c(C = 6, H = 11, N = 1, O = 1, S = 0)\n      if (residue == \"L\") element <- c(C = 6, H = 11, N = 1, O = 1, S = 0)\n      if (residue == \"K\") element <- c(C = 6, H = 12, N = 2, O = 1, S = 0)\n      if (residue == \"M\") element <- c(C = 5, H = 9, N = 1, O = 1, S = 1)\n      if (residue == \"m\") element <- c(C = 5, H = 9, N = 1, O = 2, S = 1)\n      if (residue == \"F\") element <- c(C = 9, H = 9, N = 1, O = 1, S = 0)\n      if (residue == \"P\") element <- c(C = 5, H = 7, N = 1, O = 1, S = 0)\n      if (residue == \"S\") element <- c(C = 3, H = 5, N = 1, O = 2, S = 0)\n      if (residue == \"T\") element <- c(C = 4, H = 7, N = 1, O = 2, S = 0)\n      if (residue == \"W\") element <- c(C = 11, H = 10, N = 2, O = 1, S = 0)\n      if (residue == \"Y\") element <- c(C = 9, H = 9, N = 1, O = 2, S = 0)\n      if (residue == \"V\") element <- c(C = 5, H = 9, N = 1, O = 1, S = 0)\n      return(element)\n    }\n    resultsVector <- c(C = 0, H = 0, N = 0, O = 0, S = 0)\n    for (i in 1:length(peptideVector)) {\n      resultsVector <- FindElement(peptideVector[i]) + resultsVector\n    }\n    resultsVector <- resultsVector + c(C = 0, H = 2, N = 0, O = 1, S = 0)\n    if (output == \"vector\") result <- paste(\"C\",resultsVector[1],\"H\",resultsVector[2],\"N\",resultsVector[3],\"O\",resultsVector[4],\"S\",resultsVector[5])\n    if (output == \"list\") result <- list(C = resultsVector[1], H = resultsVector[2], N = resultsVector[3], O = resultsVector[4], S = resultsVector[5])\n    return(result)\n  }\n  else return(NA)\n}\n\n\n\n\n# This function is based on the function IsotopicDistribution() from the package OrgMassSpecR\n# https://github.com/OrgMassSpec/OrgMassSpecR\n# I altered it to fit in my code / programming style\n\nisotopicDist <- function (formula = list(), charge = 1) \n{\n  if (charge == 0) \n    stop(\"a charge of zero is not allowed\")\n  inputFormula <- list(C = 0, H = 0, N = 0, O = 0, S = 0, P = 0, \n                       Br = 0, Cl = 0, F = 0, Si = 0)\n  inputFormula[names(formula)] <- formula\n  simulation <- function(inputFormula) {\n    massCarbon <- sum(sample(c(12, 13.0033548378), size = inputFormula$C, \n                             replace = TRUE, prob = c(0.9893, 0.0107)))\n    massHydrogen <- sum(sample(c(1.0078250321, 2.014101778), \n                               size = inputFormula$H, replace = TRUE, prob = c(0.999885, \n                                                                               0.000115)))\n    massNitrogen <- sum(sample(c(14.0030740052, 15.0001088984), \n                               size = inputFormula$N, replace = TRUE, prob = c(0.99632, \n                                                                               0.00368)))\n    massOxygen <- sum(sample(c(15.9949146221, 16.9991315, \n                               17.9991604), size = inputFormula$O, replace = TRUE, \n                             prob = c(0.99757, 0.00038, 0.00205)))\n    massSulfer <- sum(sample(c(31.97207069, 32.9714585, 33.96786683, \n                               35.96708088), size = inputFormula$S, replace = TRUE, \n                             prob = c(0.9493, 0.0076, 0.0429, 2e-04)))\n    massPhosphorus <- inputFormula$P * 30.97376151\n    massBromine <- sum(sample(c(78.9183376, 80.916291), size = inputFormula$Br, \n                              replace = TRUE, prob = c(0.5069, 0.4931)))\n    massChlorine <- sum(sample(c(34.96885271, 36.9659026), \n                               size = inputFormula$Cl, replace = TRUE, prob = c(0.7578, \n                                                                                0.2422)))\n    massFluorine <- inputFormula$F * 18.9984032\n    massSilicon <- sum(sample(c(27.9769265327, 28.97649472, \n                                29.97377022), size = inputFormula$Si, replace = TRUE, \n                              prob = c(0.922297, 0.046832, 0.030872)))\n    massMolecule <- sum(massCarbon, massHydrogen, massNitrogen, \n                        massOxygen, massSulfer, massPhosphorus, massBromine, \n                        massChlorine, massFluorine, massSilicon)\n    mz <- massMolecule/abs(charge)\n    return(mz)\n  }\n  sim <- replicate(10000, expr = simulation(inputFormula))\n  b <- seq(from = min(sim) - (1/(2 * abs(charge))), to = max(sim) + \n             1, by = 1/abs(charge))\n  bins <- cut(sim, breaks = b)\n  mz <- round(tapply(sim, bins, mean), digits = 2)\n  intensity <- as.vector(table(bins))\n  spectrum <- data.frame(mz, intensity)\n  spectrum <- spectrum[spectrum$intensity != 0, ]\n  spectrum$percent <- with(spectrum, round(intensity/max(intensity) * \n                                             100, digits = 2))\n  row.names(spectrum) <- 1:(nrow(spectrum))\n  return(spectrum)\n}\n\n\nformulaCharToList <- function(char){\n  \n  vec <- unlist(strsplit(as.character(char), split = \" \"))\n  lis <- list(\n    C = as.integer(vec[2]),\n    H = as.integer(vec[4]),\n    N = as.integer(vec[6]),\n    O = as.integer(vec[8]),\n    S = as.integer(vec[10])\n  )\n  return(lis)\n}\n\nlistToformularChar <- function(lis){\n  formChar <- paste(\"C\",lis[1],\"H\",lis[2],\"N\",lis[3],\"O\",lis[4],\"S\",lis[5])\n  return(formChar)\n}\n\n\nformulaCharToNamedVec <- function(char){\n  \n  vec <- unlist(strsplit(as.character(char), split = \" \"))\n  vec <- c(\n    C = as.integer(vec[2]),\n    H = as.integer(vec[4]),\n    N = as.integer(vec[6]),\n    O = as.integer(vec[8]),\n    S = as.integer(vec[10])\n  )\n  return(vec)\n}\n\nNamedVecToformularChar <- function(nvec){\n  formChar <- paste(\"C\",nvec[1],\"H\",nvec[2],\"N\",nvec[3],\"O\",nvec[4],\"S\",nvec[5])\n  return(formChar)\n}\n\n\n\n\ngenerateDist <- function( uniprotSpeciesName = \"Homo sapiens\",\n                  proteinAccession = \"P02144\", \n                  charge = 1:20, \n                  removeFirstM = FALSE, \n                  variableModifications = NA){\n  \n  #library(UniProt.ws)\n  \n  tmp <- availableUniprotSpecies()\n  \n  if (any(tmp$`Species name` == uniprotSpeciesName)) taxId <- as.integer(tmp$`taxon ID`[tmp$`Species name` == uniprotSpeciesName])\n  #else generate warning and quit\n  \n  tmp <- UniProt.ws(taxId)\n  \n  proteinSequence <- select(tmp, proteinAccession, \"SEQUENCE\", \"UNIPROTKB\")[,2]\n  \n  if (removeFirstM == TRUE) proteinSequence <- substring(proteinSequence, 2)\n  \n  proteinChemForm <- pepToForm(proteinSequence)\n  \n  #proteinChemForm <- formulaCharToNamedVec(proteinChemForm)\n  \n  formulaFrame <- data.frame( z = charge, proteinChemForm = proteinChemForm)\n  \n  formulaFrame <- ddply(\n    formulaFrame,\n    \"z\",\n    function(x){\n      \n      tmp <- formulaCharToNamedVec(x$proteinChemForm) + c(0,x$z,0,0,0)\n      data.frame( proteinChemForm = NamedVecToformularChar(tmp))\n    }\n  )\n  \n  distframe <- ddply(\n    formulaFrame,\n    .(z, proteinChemForm),\n    function(x){\n      IsotopicDistribution( formulaCharToList(x$proteinChemForm), charge = x$z )\n    }\n  )\n  \n}\n\n  \n",
    "created" : 1486418648370.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "883714846",
    "id" : "B0AB46DE",
    "lastKnownWriteTime" : 1486514255,
    "last_content_update" : 1486514255065,
    "path" : "~/GitHub/PRoteinMassSpecSim/Functions.R",
    "project_path" : "Functions.R",
    "properties" : {
        "docOutlineVisible" : "0",
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}